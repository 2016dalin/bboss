<?xml version="1.0" encoding='gb2312'?>
<!-- 
	manager-config(manager+,managerimport*,properties*)
	manager(provider+,synchronize?,transactions?,reference*,interceptor*,construction)
	manager-attributelist{
		id-管理服务者id
		jndiname-管理服务者jndi属性，目前未使用
		singlable-是否是单实例模式
		default-是否是缺省管理服务		
		callorder_sequence-拦截器执行顺序，true按顺序执行，false按链式顺序执行，缺省值true
	}
	##
	# 如果在系统中配置了多个拦截器，整个框架能够确保每个拦截器都被调用
	# 调用的顺序为 拦截器配置的顺序,如果同时通过manager节点的属性interceptor定义了一个拦截器，
	# 则会首先调用这个属性对应的拦截器，然后再调用其他拦截器
	##
	interceptor(pcdata)
	
	interceptor-attributelist{
		class-拦截器的实现类，所有的拦截器都必须实现
		      com.frameworkset.proxy.Interceptor接口
		      目前系统中提供了以下缺省拦截器：
		      	数据库事务管理拦截器（com.chinacreator.spi.
		      	interceptor.TransactionInterceptor）,支持对声明式事务的管理
	}
	reference(pcdata)
	reference-attributelist{
		fieldname-对应的管理服务提供者中的字段名称，必选属性
		refid-引用的管理服务的id，对应manager节点的id属性，
		reftype-对应的管理服务提供者类型，可选属性,可以作为refid的辅助属性
		class-直接应用class指定的一个实例对象
		value-直接指定属性对应的标量值
		refid，class，value三个属性只能任意指定一个
		
	}
	provider(pcdata)   
	provider-attributelist{
		type-服务提供者标识id
		used-服务提供者是否被启用,缺省值为false
		class-服务提供者对应的class类
		prior-provider调用的优先级
	}
	
	construction(param*)
	synchronize(method+)
	synchronize-attributelist{
		enabled-是否启用同步功能，如果没有启用同步功能
		        即使配置了多个服务提供者的同步方法，所有的同步功能将不起作用
	}
	transactions(method+)
	
	method(param*,rollbackexceptions?)
	method-attributelist{
		name-方法名称，name和pattern不能同时出现
		pattern-匹配方法名称的正则表达式
		txtype-需要控制的事务类型，取值范围：
					NEW_TRANSACTION，
					REQUIRED_TRANSACTION，
					MAYBE_TRANSACTION，
					NO_TRANSACTION
	}
	param(pcdata)
	param-attributelist{
		type-参数的类型,如果是构建函数的参数，那么将创建type对应的class的对象实例作为构建函数的实例参数
		value-用来指定构造函数的参数值
		refid-用来指定构造函数的引用其他对象标识
	}
	rollbackexceptions(exception+)
	
	exception(pcdata)
	exception-attributelist{
		class-指定异常类
		type-IMPLEMENTS,INSTANCEOF 异常匹配类型，IMPLEMENTS表示只能是class类型异常类，INSTANCEOF表示class类和其子类
	}
	
	mangerimport(pcdata)
	mangerimport-attributelist{
		file-导入其他模块的配置文件
	}
	
	************************************************************************
	新的服务配置语法，兼容旧的语法（manager-provider）
	**************************************************************************
	
	properties(property*)
	properties-attributelist{
		name-指定一组属性的分组名称		
	}
	property(property*,map,list,set,description,editor)
	property-attributelist{
		name-指定属性名称,
		id-指定属性名称，name的替代属性，如果指定了name那么id属性将被忽略
		singlable-是否是单实例模式,true-单例，false-多实例
		
		label-指定属性的标记
		
		value-指定属性的值，属性值也可以通过property节点的内置文本指定
		
		class-指定值对应的java类型名称：int,boolean,string,用户自定义的类型
		
		refid-节点属性值为refid对应的属性或者服务提供者的值
		      如果是属性前面用：attr:作为前缀
		      如果引用的是服务：service:作为前缀，
		      对于引用的解析将采用反向索引的方式的替换还没有加载的引用属性和服务	
		
		f:xxx-bean依赖注入属性语法
		
		xxx-其他扩展属性，保存在一个map对象中		
		
		init-method:指定对象的初始化方法
		destroy-method：指定对象的销毁方法
		
		
		
		refid，class可以组合指定引用对象值和类型
		value，class可以组合指定一个属性值和属性类型
		
		init-method，destroy-method两个属性分别对应aop框架提供的两个InitializingBean和DisposableBean
		实现的方法，如果组件已经实现了InitializingBean就不需要指定init-method属性
		如果组件实现了DisposableBean接口就不需要指定destroy-method属性
		
	}
	map(property+) ：对应的属性值为map对象，对象的类型为：Pro
	list(property+)：对应的属性值为list对象，对象的类型为：Pro
	set(property+)：对应的属性值为set对象，对象的类型为：Pro
	description(pcdata):描述信息
	editor：属性转换器
	editor-attributelist{
		class-转换器类，系统默认支持字符串向其他基本类行转换:					 
					 * int,char,short,double,float,long,boolean,byte
					 * java.sql.Date,java.util.Date,
					 * Integer
					 * Long
					 * Float
					 * Short
					 * Double
					 * Character
					 * Boolean
					 * Byte
					如果不是基本数据类型那就需要通过自定义的属性编辑器来实现，属性编辑器必需实现接口:
						com.frameworkset.util.EditorInf
						
						Object getValueFromObject(Object fromValue) ;    
    					Object getValueFromString(String fromValue);
	}
	
	
	
	
-->
<manager-config>
	
	<!-- 测试用例配置 开始-->
<!--	-->
<!--	<managerimport file="org/frameworkset/spi/properties/loopinject/loopinject.xml" />	-->
<!--	<managerimport file="org/frameworkset/spi/reference/manager-provider-reference.xml" />-->
<!--	<managerimport file="org/frameworkset/spi/remote/jms/manager-jmstemplate-test.xml" />-->
<!--	<managerimport file="org/frameworkset/spi/constructor/manager-constructor.xml" />-->
<!--	<managerimport file="org/frameworkset/spi/interceptor/simplemanager-interceptor.xml" />	-->
<!--	<managerimport file="org/frameworkset/spi/transaction/annotation/annotationtx.xml" />-->
<!--	<managerimport file="org/frameworkset/spi/properties/interceptor/interceptor.xml" />-->
<!--	<managerimport file="org/frameworkset/spi/beans/manager-beans.xml" />-->
<!--	<managerimport file="org/frameworkset/spi/security/security-provider.xml" />-->
<!--	<managerimport file="org/frameworkset/spi/properties/injectbean/injectbean.xml" />-->
<!--	<managerimport file="org/frameworkset/spi/transaction/annotation/annotationtx.xml" />-->
<!--	<managerimport file="org/frameworkset/spi/syn/manager-synchronize.xml" />-->
	
	
<!--	-->
	<!-- 
		远程服务（RPC）组件框架配置
	 -->
	<managerimport file="org/frameworkset/spi/manager-rpc-service.xml" />
	
<!--	<managerimport docbase="web::conf" file="**/manager-rpc-*.xml" />-->
<!--	<managerimport docbase="web::conf" file="org/frameworkset/task/quarts-task.xml" />-->
<!--	<managerimport docbase="web::conf" file="org/frameworkset/spi/remote/manager-rpc-test.xml" />-->
	
	
	<property name="sqlfile.refresh_interval" value="10000"/>
	

</manager-config>
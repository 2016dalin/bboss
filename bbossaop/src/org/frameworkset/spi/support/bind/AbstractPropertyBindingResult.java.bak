/*
 *  Copyright 2008 biaoping.yin
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.frameworkset.spi.support.bind;

import java.beans.PropertyChangeEvent;

import org.frameworkset.spi.support.validate.DefaultMessageCodesResolver;
import org.frameworkset.util.beans.BeanWrapper;
import org.frameworkset.util.beans.PropertyAccessException;
import org.frameworkset.util.beans.PropertyEditorRegistry;

import com.frameworkset.util.EditorInf;



/**
 * <p>Title: AbstractPropertyBindingResult.java</p> 
 * <p>Description: </p>
 * <p>bboss workgroup</p>
 * <p>Copyright (c) 2007</p>
 * @Date 2010-10-15 ÏÂÎç03:42:08
 * @author biaoping.yin
 * @version 1.0
 */
public abstract class AbstractPropertyBindingResult  extends AbstractBindingResult {

	/**
	 * Create a new AbstractPropertyBindingResult instance.
	 * @param objectName the name of the target object
	 * @see DefaultMessageCodesResolver
	 */
	protected AbstractPropertyBindingResult(String objectName) {
		super(objectName);
	}


//	/**
//	 * Returns the underlying PropertyAccessor.
//	 * @see #getPropertyAccessor()
//	 */
//	public PropertyEditorRegistry getPropertyEditorRegistry() {
//		return getPropertyAccessor();
//	}

	
//	/**
//	 * Determines the field type from the property type.
//	 * @see #getPropertyAccessor()
//	 */
//	public Class getFieldType(String field) {
//		return getPropertyAccessor().getPropertyType(fixedField(field));
//	}

//	/**
//	 * Fetches the field value from the PropertyAccessor.
//	 * @see #getPropertyAccessor()
//	 */
//	protected Object getActualFieldValue(String field) {
//		try
//		{
//			return getPropertyAccessor().getPropertyValue(field);
//		}
//		catch(Exception e)
//		{
//			throw new PropertyAccessException(new PropertyChangeEvent(this.getPropertyAccessor().getWrappedInstance(), field,
//				     null, null),"getActualFieldValue",e);
//		}
//	}

//	/**
//	 * Formats the field value based on registered PropertyEditors.
//	 * @see #getCustomEditor
//	 */
//	protected Object formatFieldValue(String field, Object value) {
//		EditorInf customEditor = getCustomEditor(field);
//		if (customEditor != null) {
//			String textValue = String.valueOf(customEditor.getValueFromObject(value));
//			
//			// If the PropertyEditor returned null, there is no appropriate
//			// text representation for this value: only use it if non-null.
//			if (textValue != null) {
//				return textValue;
//			}
//		}
//		return value;
//	}

//	/**
//	 * Retrieve the custom PropertyEditor for the given field, if any.
//	 * @param field the field name
//	 * @return the custom PropertyEditor, or <code>null</code>
//	 */
//	protected EditorInf getCustomEditor(String field) {
//		String fixedField = fixedField(field);
//		Class targetType = getPropertyAccessor().getPropertyType(fixedField);
//		EditorInf editor = getPropertyAccessor().findCustomEditor(targetType, fixedField);
////		if (editor == null) {
////			editor = BeanUtils.findEditorByConvention(targetType);
////		}
//		return editor;
//	}


//	/**
//	 * Provide the PropertyAccessor to work with, according to the
//	 * concrete strategy of access.
//	 * <p>Note that a PropertyAccessor used by a BindingResult should
//	 * always have its "extractOldValueForEditor" flag set to "true"
//	 * by default, since this is typically possible without side effects
//	 * for model objects that serve as data binding target.
//	 * @see ConfigurablePropertyAccessor#setExtractOldValueForEditor
//	 */
//	public abstract BeanWrapper getPropertyAccessor();

}

<?xml version="1.0" encoding='gb2312'?>
<manager-config>
<description>
<![CDATA[
	依赖注入配置文件,本测试用例测试以下功能点：
		测试普通bean 的属性依赖注入和服务依赖注入的功能(分为两种模式风格的属性依赖注入)
		测试普通bean 的构建函数依赖注入和服务依赖注入的功能
		二者的主要区别就是：构建函数依赖注入需要用construction元素将注入的属性包含进去就可以了
		声明式事务管理
		
	配置如下：
	
	o 属性bean--inject.test.injectbean,bean的类型class 为
		org.frameworkset.spi.properties.injectbean.InjectService
		对应的配置为：
		<property name="inject.test.injectbean" 
		class="org.frameworkset.spi.properties.injectbean.InjectService">
		下面描述如何对InjectService中属性完成依赖注入：
			test_int:：int
			test_inject::org.frameworkset.spi.properties.injectbean.injectbean.Inject
			refattr::int
			test_refattr::string
			refservice::org.frameworkset.spi.properties.injectbean.ServiceImpl
		
	o InjectService中定义了字段test_int 类型为int，在这里注入值为0,配置为：
		<property name="test_int" 
				      value="0" class="int"/>
	o InjectService中定义了字段test_inject，类型为org.frameworkset.spi.properties.injectbean.injectbean.Inject
	   系统加载InjectService属性的时候会注入org.frameworkset.spi.properties.injectbean.Inject的实例对象
		<property name="test_inject" 
				  class="org.frameworkset.spi.properties.injectbean.Inject"/>
	o InjectService中定义了字段refattr,其类型为int，系统将注入外部属性test_refattr的值来填充refattr的值
		
		<property name="refattr" 
			      refid="attr:test_refattr" class="int"/>
	 外部属性test_refattr的定义为
		 <property name="test_refattr" 
				      value="1000" class="string"/>
	我们看到外部属性test_refattr的值类型和refattr的值类型不一致，一个为int，一个为string，aop框架在注入值的时候将自动进行值转换
	
	o InjectService中定义了refservice属性，属性值通过引用外部属性值attr:test_refservice来注入，属性类型和属性test_refservice对应的值类型一致
	
		<property name="refservice" 
				      refid="attr:test_refservice"/>
		外部属性定义：<property name="test_refservice" 
			      refid="service:test_serivce"/> 
			      这里test_refservice的值又是引用了外部服务service:test_serivce，其值类型和服务service:test_serivce的类型一致
    
    o InjectService中定义了refservice_direct属性，值直接引用了外部服务service:test_serivce，类型与外部服务service:test_serivce的值类型一致
	
	<property name="refservice_direct" 
			      refid="service:test_serivce"/>	
	外部服务定义如下：
		<manager id="test_serivce" singlable="true">
			<provider type="default" class="org.frameworkset.spi.properties.injectbean" />
		</manager>
		
	o 全局属性test_refattr定义为string类型，值为1000
		<property name="test_refattr" 
			      value="1000" class="string"/>
			      
	o 全局属性test_refservice引用服务service:test_serivce,类型与服务service:test_serivce的类型保持一致
		<property name="test_refservice" 
				      refid="service:test_serivce"/>
	o 服务test_serivce为单实例模式，服务的实现类为org.frameworkset.spi.properties.injectbean.ServiceImpl			      
	
 ]]>
</description>

<properties>
	<!-- 
		内嵌元素风格属性依赖注入
	 -->
	<property name="inject.p.injectbean" 
		class="org.frameworkset.spi.properties.injectbean.InjectService">
		<property name="test_int" 
			      value="0" class="int"/>
		<property name="test_inject" 
				  class="org.frameworkset.spi.properties.injectbean.Inject"/>
		
		<property name="refattr" 
			      refid="attr:test_refattr" class="int"/>
		<property name="refservice" 
			      refid="attr:test_refservice"/>	      
		<property name="refservice_direct" 
			      refid="service:test_serivce"/>	      
	</property>
	
	<!--
	元素属性风格属性依赖注入
	-->
	<property name="inject.f.injectbean" 
			class="org.frameworkset.spi.properties.injectbean.InjectService" 
			f:test_int="0" 
			f:refattr="attr:test_refattr"
			f:refservice="attr:test_refservice"	      
			f:refservice_direct="service:test_serivce"
			ett="aaaa"
			ett2="vvvv"
			>	   
			<property name="test_inject" 
					  class="org.frameworkset.spi.properties.injectbean.Inject"/>        
	</property>
	<!-- 
		构造函数依赖注入
	 -->
	<property name="inject.c.injectbean" 
		class="org.frameworkset.spi.properties.injectbean.InjectService">
		<construction>
			<property name="test_int" 
				      value="0" class="int"/>
			<property name="test_inject" 
					  class="org.frameworkset.spi.properties.injectbean.Inject"/>
			
			<property name="refattr" 
				      refid="attr:test_refattr" class="string"/>
			<property name="refservice" 
				      refid="attr:test_refservice"/>	      
			<property name="refservice_direct" 
				      refid="service:test_serivce"/>	 
		</construction>
		<transactions>
			<!-- 
				定义需要进行事务控制的方法
				属性说明：
				name-方法名称，可以是一个正则表达式，正则表达式的语法请参考jakarta-oro的相关文档，如果使用
				正则表达式的情况时，则方法中声明的方法参数将被忽略，但是回滚异常有效。
				pattern-方法名称的正则表达式匹配模式，模式匹配的顺序受配置位置的影响，如果配置在后面或者中间，
						那么会先执行之前的方法匹配，如果匹配上了就不会对该模式方法进行匹配了，否则执行匹配操作。
						如果匹配上特定的方法名称，那么这个方法就是需要进行事务控制的方法
						例如：模式testInt.*匹配接口中以testInt开头的任何方法
				txtype-需要控制的事务类型，取值范围：
				NEW_TRANSACTION，
				REQUIRED_TRANSACTION，
				MAYBE_TRANSACTION，
				NO_TRANSACTION
			-->
			<method name="getRefattr" txtype="NEW_TRANSACTION">
				
			</method>			
			
			
			 	<!-- 
				系统级别的异常java.lang.NullPointException，导致事务回滚
			 -->
			
			
		</transactions>	         
		<securitycontext>
			<methed name="*"/>
			<roles>admin,guest</roles>
		</securitycontext>  
	</property>
	
	<property name="inject.tx.injectbean" 
		class="org.frameworkset.spi.properties.injectbean.InjectService">
		<construction>
			<property name="test_int" 
				      value="0" class="int"/>
			<property name="test_inject" 
					  class="org.frameworkset.spi.properties.injectbean.Inject"/>
			
			<property name="refattr" 
				      refid="attr:test_refattr" class="int"/>
			<property name="refservice" 
				      refid="attr:test_refservice"/>	      
			<property name="refservice_direct" 
				      refid="service:test_serivce"/>	 
		</construction>
		<transactions>
			<!-- 
				定义需要进行事务控制的方法
				属性说明：
				name-方法名称，可以是一个正则表达式，正则表达式的语法请参考jakarta-oro的相关文档，如果使用
				正则表达式的情况时，则方法中声明的方法参数将被忽略，但是回滚异常有效。
				pattern-方法名称的正则表达式匹配模式，模式匹配的顺序受配置位置的影响，如果配置在后面或者中间，
						那么会先执行之前的方法匹配，如果匹配上了就不会对该模式方法进行匹配了，否则执行匹配操作。
						如果匹配上特定的方法名称，那么这个方法就是需要进行事务控制的方法
						例如：模式testInt.*匹配接口中以testInt开头的任何方法
				txtype-需要控制的事务类型，取值范围：
				NEW_TRANSACTION，
				REQUIRED_TRANSACTION，
				MAYBE_TRANSACTION，
				NO_TRANSACTION
			-->
					
			
			<method name="testTXInvoke" txtype="REQUIRED_TRANSACTION"/>
			
			
			
			
			<!-- 			    
					定义使事务回滚的异常,如果没有明确声明需要回滚事务的异常，那么当有异常发生时，事务管理框架将自动回滚当前事务
					class-异常的完整类路径
					type-是否检测类型异常的子类控制标识，
					IMPLEMENTS只检测异常类本身，忽略异常类的子类；
					INSTANCEOF检查异常类本省及其所有子类
					
				-->
			<method name="testTXWithSpecialExceptions">
				<rollbackexceptions>
					<exception class="org.frameworkset.spi.transaction.RollbackInstanceofException" 
					type="INSTANCEOF"/>
					<exception class="org.frameworkset.spi.transaction.Exception1" 
					type="IMPLEMENTS"/>
				</rollbackexceptions>
				<param type="java.lang.String"/>
			</method>
			
			<!-- 
					
					如果涉及的方法名称是一个正则表达式的匹配模式，则无需配置方法参数 
					如果指定的方法没有参数则无需指定参数
					注意参数出现的位置顺序和实际方法定义的参数顺序保持一致
					模式为* 表示匹配所有的方法
				-->
				
			<!-- 
				通过模式方法进行声明式事务控制，同时声明了需要回滚事务的异常
				pattern【testPatternTX[1-9.]*】表示以testPatternTX开头的所有方法
			 -->
			 
		
			 
			<!--	通过模式方法进行声明式事务控制
				pattern【testPatternTX[1-9.]*】表示以testPatternTX开头的所有方法		
				 -->	
			<method pattern="testPatternTX[1-9.]*">				
				<param type="java.lang.String"/>
			</method>
			
			
			 	<!-- 
				系统级别的异常java.lang.NullPointException，导致事务回滚
			 -->
			
			
		</transactions>	         
		<securitycontext>
			<methed name="*"/>
			<roles>admin,guest</roles>
		</securitycontext>  
	</property>
	
	<property name="test_refattr" 
			      value="1000" class="string"/>
    <property name="test_refservice" 
			      refid="service:test_serivce"/> 
    <manager id="test_serivce" singlable="true">
		<provider type="default" class="org.frameworkset.spi.properties.injectbean.ServiceImpl" />
		<property name="test_refattr" 
			      value="1000" class="string"/>
	</manager>	
	
	<!-- 
		属性编辑器示例
		通过org.frameworkset.spi.properties.injectbean.ProEditor将属性sex的
		值转换为汉字性别
	 -->
	<property name="inject.editor.injectbean.0" 
		class="org.frameworkset.spi.properties.injectbean.EditorService">
		<property name="sex" value="0">
			<editor class="org.frameworkset.spi.properties.injectbean.ProEditor"/>
		</property>
	</property>
	
	<!-- 
		属性编辑器示例
		通过org.frameworkset.spi.properties.injectbean.ProEditor将属性sex的
		值转换为汉字性别
	 -->
	<property name="inject.editor.injectbean.1" 
		class="org.frameworkset.spi.properties.injectbean.EditorService">
		<property name="sex" value="1">
			<editor class="org.frameworkset.spi.properties.injectbean.ProEditor"/>
		</property>
	</property>
	
	<!-- 
		属性编辑器示例
		通过org.frameworkset.spi.properties.injectbean.ProEditor将属性sex的
		值转换为汉字性别
	 -->
	<property name="inject.editor.injectbean.2" 
		class="org.frameworkset.spi.properties.injectbean.EditorService">
		<property name="sex" value="2">
			<editor class="org.frameworkset.spi.properties.injectbean.ProEditor"/>
		</property>
	</property>
	
</properties>
</manager-config>
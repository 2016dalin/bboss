<?xml version="1.0" encoding="gb2312"?>

<poolman>

<datasource external="${external}">

    <dbname><![CDATA[${dbname}]]></dbname>
	<loadmetadata>false</loadmetadata>
    <jndiName><![CDATA[${dbname_datasource_jndiname}]]></jndiName>
     <autoprimarykey>false</autoprimarykey>
	<encryptdbinfo>${encryptdbinfo}</encryptdbinfo>
     <cachequerymetadata>${cachequerymetadata}</cachequerymetadata>
    <driver><![CDATA[${driver}]]></driver>

     <url><![CDATA[${jdbcurl}]]></url> 
   
    <username>${username}</username>
    <password>${password}</password>

    <txIsolationLevel>${txIsolationLevel}</txIsolationLevel>

    <nativeResults>true</nativeResults>

    <poolPreparedStatements>false</poolPreparedStatements>

    <initialConnections>${initialConnections}</initialConnections>
    
    <minimumSize>${minimumSize}</minimumSize>
    <maximumSize>${maximumSize}</maximumSize>
	<!--控制connection达到maximumSize是否允许再创建新的connection
		true：允许，缺省值
		false：不允许-->
    <maximumSoft>${maximumSoft}</maximumSoft>
    
    <!-- 
    是否检测超时链接（事务超时链接）
    true-检测，如果检测到有事务超时的链接，系统将强制回收（释放）该链接
    false-不检测，默认值
     -->
    <removeAbandoned>${removeAbandoned}</removeAbandoned>
	<!--
		removeAbandonedTimeout
		链接使用超时时间（事务超时时间）
		单位：秒
	-->
    <userTimeout>${userTimeout}</userTimeout>
    <!-- 
    	系统强制回收链接时，是否输出后台日志
    	true-输出，默认值
    	false-不输出
     -->
    <logAbandoned>${logAbandoned}</logAbandoned>
    
    <!-- 
    	数据库会话是否是readonly，缺省为false
     -->
    <readOnly>${readOnly}</readOnly>
	
	<!--
		对应属性：timeBetweenEvictionRunsMillis
		the amount of time (in milliseconds) to sleep between examining idle objects for eviction 
	-->
	<skimmerFrequency>${skimmerFrequency}</skimmerFrequency>
	<!--对应于minEvictableIdleTimeMillis 属性：
	minEvictableIdleTimeMillis the minimum number of milliseconds 
	an object can sit idle in the pool before it is eligable for evcition
	单位：秒
	
	空闲链接回收时间，空闲时间超过指定的值时，将被回收
	-->
	<connectionTimeout>${connectionTimeout}</connectionTimeout>
	<!--
	numTestsPerEvictionRun 
	the number of idle objects to 
	examine per run within the idle object eviction thread (if any)
	
	每次回收的链接个数 
	-->
    <shrinkBy>${shrinkBy}</shrinkBy>
    <!--
    /**
     * 检测空闲链接处理时，是否对空闲链接进行有效性检查控制开关
     * true-检查，都检查到有无效链接时，直接销毁无效链接
     * false-不检查，缺省值
     */
     -->
    <testWhileidle>${testWhileidle}</testWhileidle>


    <!--
        定义数据库主键生成机制
        缺省的采用系统自带的主键生成机制，
        外步程序可以覆盖系统主键生成机制
        由值来决定
        auto:自动，一般在生产环境下采用该种模式，
               解决了单个应用并发访问数据库添加记录产生冲突的问题，效率高，如果生产环境下有多个应用并发访问同一数据库时，必须采用composite模式
        composite：结合自动和实时从数据库中获取最大的主键值两种方式来处理，开发环境下建议采用该种模式，
                   解决了多个应用同时访问数据库添加记录时产生冲突的问题，效率相对较低， 如果生产环境下有多个应用并发访问同一数据库时，必须采用composite模式
    -->
    <keygenerate>composite</keygenerate>

	
    <!-- 请求链接时等待时间，单位：秒
    客服端程序请求链接等待时间超过指定值时，后台包等待超时异常
     -->
    <maxWait>${maxWait}</maxWait>
    
    <!-- 
    	链接有效性检查sql语句
     -->
    <validationQuery><![CDATA[${validationQuery}]]></validationQuery>
	<showsql>${showsql}</showsql>
	#if($externaljndiName && !$externaljndiName.equals(""))
			<externaljndiName><![CDATA[${externaljndiName}]]></externaljndiName>
	#end
	<usepool>${usepool}</usepool>

  </datasource> 
 
 
</poolman>

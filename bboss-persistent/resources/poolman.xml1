<?xml version="1.0" encoding="gb2312"?>

<poolman>

  <management-mode>local</management-mode>

  <datasource external="false">

    <dbname>bspf</dbname>
	<loadmetadata>true</loadmetadata>
	<!-- 
		 内部绑定PoolManDataSource的jndi名称
	-->
    <jndiName>bspf_datasource_jndiname</jndiName>
    <!-- 
    	当dataSource的external属性指定为true时，必须指定外部数据源jndi绑定名称
    	如果系统需要通过内部的jndi查找该数据源，还必须指定jndiName名称，比如系统管理中hibernate
    	必需通过内部jndi访问数据源来获取数据库的链接，以及应用hibernate产生自定义数据库主键机制
    -->
    <externaljndiName>external_bspf_datasource_jndiname</externaljndiName>
    <driver>oracle.jdbc.driver.OracleDriver</driver>
		  <!--<url>jdbc:oracle:thin:@202.197.40.177:1521:ora177</url>-->
    <!--<url>jdbc:oracle:thin:@202.197.40.177:1521:ora177</url>-->
    <url>jdbc:oracle:thin:@172.16.168.122:1521:orcl</url>
    <username>hnds</username>
    <password>hnds</password>


    <txIsolationLevel>READ_COMMITTED</txIsolationLevel>

    <nativeResults>true</nativeResults>

    <poolPreparedStatements>false</poolPreparedStatements>

    <initialConnections>2</initialConnections>
    <minimumSize>2</minimumSize>
    <maximumSize>20</maximumSize>
	<!--控制connection达到maximumSize是否允许再创建新的connection
		true：允许，缺省值
		false：不允许-->
    <maximumSoft>false</maximumSoft>
	<!--
		占用connection锁超时，释放connection锁
	-->
    <userTimeout>30</userTimeout>
	
	<!--检测空闲队列中是否超过指定的时间connection线程执行的频率，即每过12妙执行一次扫描
		如果发现有connectionTimeout的connection则将其关闭，释放数据库资源。
		缺省为420秒
	-->
	<skimmerFrequency>120000</skimmerFrequency>
	<!--扫描空闲队列中超过指定的时间的connection，如果发现超过了，则将连接关闭，释放数据库资源-->
	<connectionTimeout>240000</connectionTimeout>
	<!--扫描空闲队列中超过指定的时间的connection，如果发现超过了，则将连接关闭，释放数据库资源，
		当清除connection的个数达到7个时退出本次扫描
		原则上shrinkBy的值应该介于maxsize和minimumSize的值之间
		缺省为5个
		-->
    <shrinkBy>5</shrinkBy>


    <!--
        定义数据库主键生成机制
        缺省的采用系统自带的主键生成机制，
        外步程序可以覆盖系统主键生成机制
        由值来决定
        auto:自动，一般在生产环境下采用该种模式，
               解决了单个应用并发访问数据库添加记录产生冲突的问题，效率高，如果生产环境下有多个应用并发访问同一数据库时，必须采用composite模式
        composite：结合自动和实时从数据库中获取最大的主键值两种方式来处理，开发环境下建议采用该种模式，
                   解决了多个应用同时访问数据库添加记录时产生冲突的问题，效率相对较低， 如果生产环境下有多个应用并发访问同一数据库时，必须采用composite模式
    -->
    <keygenerate>composite</keygenerate>

	<!--poolman的日志信息输出改用log4j来输出到日志文件，相关的配置见log4j.properties文件-->
    <!--<logFile>dbaccess.log</logFile>
    <debugging>true</debugging>-->


  </datasource>
  
   <datasource>

    <dbname>hb</dbname>
	<loadmetadata>false</loadmetadata>
    <jndiName>hb_datasource_jndiname</jndiName>
    <driver>com.microsoft.jdbc.sqlserver.SQLServerDriver</driver>
    <url>jdbc:sqlserver://172.16.81.34:1433;databaseName=hbgis</url> 
    <username>sa</username>
    <password>123456</password>

    <txIsolationLevel>READ_COMMITTED</txIsolationLevel>

    <nativeResults>true</nativeResults>

    <poolPreparedStatements>false</poolPreparedStatements>

    <initialConnections>2</initialConnections>
    
    <minimumSize>2</minimumSize>
    <maximumSize>10</maximumSize>
	<!--控制connection达到maximumSize是否允许再创建新的connection
		true：允许，缺省值
		false：不允许-->
    <maximumSoft>false</maximumSoft>
    
    <!-- 
    是否检测超时链接（事务超时链接）
    true-检测，如果检测到有事务超时的链接，系统将强制回收（释放）该链接
    false-不检测，默认值
     -->
    <removeAbandoned>true</removeAbandoned>
	<!--
		链接使用超时时间（事务超时时间）
		单位：秒
	-->
    <userTimeout>50</userTimeout>
    <!-- 
    	系统强制回收链接时，是否输出后台日志
    	true-输出，默认值
    	false-不输出
     -->
    <logAbandoned>true</logAbandoned>
    
    <!-- 
    	数据库会话是否是readonly，缺省为false
     -->
    <readOnly>true</readOnly>
	
	<!--
		对应属性：timeBetweenEvictionRunsMillis
		the amount of time (in milliseconds) to sleep between examining idle objects for eviction 
	-->
	<skimmerFrequency>120000</skimmerFrequency>
	<!--对应于minEvictableIdleTimeMillis 属性：
	minEvictableIdleTimeMillis the minimum number of milliseconds 
	an object can sit idle in the pool before it is eligable for evcition
	单位：秒
	
	空闲链接回收时间，空闲时间超过指定的值时，将被回收
	-->
	<connectionTimeout>240000</connectionTimeout>
	<!--
	numTestsPerEvictionRun 
	the number of idle objects to 
	examine per run within the idle object eviction thread (if any)
	
	每次回收的链接个数 
	-->
    <shrinkBy>5</shrinkBy>
    <!--
    /**
     * 检测空闲链接处理时，是否对空闲链接进行有效性检查控制开关
     * true-检查，都检查到有无效链接时，直接销毁无效链接
     * false-不检查，缺省值
     */
     -->
    <testWhileidle>true</testWhileidle>


    <!--
        定义数据库主键生成机制
        缺省的采用系统自带的主键生成机制，
        外步程序可以覆盖系统主键生成机制
        由值来决定
        auto:自动，一般在生产环境下采用该种模式，
               解决了单个应用并发访问数据库添加记录产生冲突的问题，效率高，如果生产环境下有多个应用并发访问同一数据库时，必须采用composite模式
        composite：结合自动和实时从数据库中获取最大的主键值两种方式来处理，开发环境下建议采用该种模式，
                   解决了多个应用同时访问数据库添加记录时产生冲突的问题，效率相对较低， 如果生产环境下有多个应用并发访问同一数据库时，必须采用composite模式
    -->
    <keygenerate>composite</keygenerate>

	<!--poolman的日志信息输出改用log4j来输出到日志文件，相关的配置见log4j.properties文件-->
    <!--<logFile>dbaccess.log</logFile>
    <debugging>true</debugging>-->
    <!-- 请求链接时等待时间，单位：秒
    客服端程序请求链接等待时间超过指定值时，后台包等待超时异常
     -->
    <maxWait>60</maxWait>
    
    <!-- 
    	链接有效性检查sql语句
     -->
    <validationQuery>select * from dbo.hyfl</validationQuery> 
    
    <autoprimarykey>false</autoprimarykey>
	<showsql>false</showsql>

  </datasource> 
  
   

</poolman>




